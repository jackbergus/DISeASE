/*
 * Copyright (C) 2015 Giacomo Bergami
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */
package disease.datatypes.hypergraphdb.basics;

//import disease.datatypes.hypergraphdb.GraphDB;
import java.util.Objects;
import org.hypergraphdb.HGHandle;
import org.hypergraphdb.HGPlainLink;

/**
 *
 * @author Giacomo Bergami
 */
public class BinEdge extends HGPlainLink implements IHandler<BinEdge> {
    
    private int src;
    public void setSrc(int s) {
        this.src = s;
    }
    public int getSrc() {
        return src;
    }
    
    private int dst;
    public void setDst(int d) {
        this.dst = d;
    }
    public int getDst() {
        return dst;
    }
    
    private double score;
    public double getScore() {
        return score;
    }
    public void setScore(double score) {
        this.score = score;
    }
    
    private String relation;
    public String getRelation() {
        return relation;
    }
    public void setRelation(String r) {
        this.relation = r;
    }
    
    public BinEdge(HGHandle ...args) {
        super(args);
    }
    
    public BinEdge(GraphNode<?> src, GraphNode<?> dest, double score, String relation) {
        super(src.getHandle(),dest.getHandle());
        this.src = src.hashCode();
        this.dst = dest.hashCode();
    }
    
    public <K> GraphNode<K> getSource() {
        //System.out.println(GraphDB.getInstance().get(super.getTargetAt(0)).toString());
        return (GraphNode<K>)GraphDB.getInstance().get(super.getTargetAt(0));
    }
    
    public <K> GraphNode<K> getDestination() {
        return (GraphNode<K>)GraphDB.getInstance().get(super.getTargetAt(1));
    }
    

    

    @Override
    public boolean equals(Object obj) {
        if (obj == null) {
            return false;
        }
        if (getClass() != obj.getClass()) {
            return false;
        }
        final BinEdge other = (BinEdge) obj;
        if (this.src != other.src) {
            return false;
        }
        if (this.dst != other.dst) {
            return false;
        }
        if (Double.doubleToLongBits(this.score) != Double.doubleToLongBits(other.score)) {
            return false;
        }
        if (!Objects.equals(this.relation, other.relation)) {
            return false;
        }
        return true;
    }

    @Override
    public int hashCode() {
        int hash = 7;
        hash = 41 * hash + this.src;
        hash = 41 * hash + this.dst;
        hash = 41 * hash + (int) (Double.doubleToLongBits(this.score) ^ (Double.doubleToLongBits(this.score) >>> 32));
        hash = 41 * hash + Objects.hashCode(this.relation);
        return hash;
    }

    private transient HGHandle handle;
    @Override
    public HGHandle getHandle() {
        return this.handle;
    }

    @Override
    public void setHandle(HGHandle h) {
        this.handle = h;
    }
    
}
