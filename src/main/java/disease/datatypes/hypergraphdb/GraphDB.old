/*
 * Copyright (C) 2015 Giacomo Bergami
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */
package disease.datatypes.hypergraphdb;

import disease.Dataset.interfaces.Dictionary;
import disease.Dataset.interfaces.WordList;
import disease.datatypes.hypergraphdb.DataNodes.GraphWikiPage;
import disease.datatypes.hypergraphdb.DataNodes.ICD9CM;
import disease.datatypes.hypergraphdb.basics.BinEdge;
import disease.datatypes.hypergraphdb.basics.GraphNode;
import disease.datatypes.serializablegraph.Term;
import disease.ontologies.ICD9CMCode;
import java.io.File;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.TreeMap;
import java.util.stream.Collectors;
import org.hypergraphdb.*; 
import org.hypergraphdb.HGQuery.hg;
import org.hypergraphdb.algorithms.HGDepthFirstTraversal;
import org.hypergraphdb.algorithms.SimpleALGenerator;
import org.hypergraphdb.query.AtomTypeCondition;
import org.hypergraphdb.storage.BDBConfig;
import org.hypergraphdb.storage.HGStoreImplementation;
import org.hypergraphdb.util.Pair;

/**
 *
 * @author Giacomo Bergami
 */
public class GraphDB {
    
    private static final String location = "data" + File.separator + "ontology/ontology.db";
    private transient HyperGraph graph; 
    private transient static GraphDB self = null;
    
    private GraphDB() {
        /*SequentialUUIDHandleFactory handleFactory =
                           new SequentialUUIDHandleFactory(System.currentTimeMillis(), 0);*/
        HGConfiguration config = new HGConfiguration();
        //config.setHandleFactory(handleFactory);
        BDBConfig bdbConfig = (BDBConfig) config.getStoreImplementation().getConfiguration();
        bdbConfig.getEnvironmentConfig().setCacheSize(800*1024*1024);
        bdbConfig.getEnvironmentConfig().setTransactional(false);
        //config.setStoreImplementation((HGStoreImplementation) bdbConfig);
        if (config.getTypeConfiguration().getJavaTypeMapper()==null)
            System.out.println("ERR");
        graph = HGEnvironment.get(location, config);
    }
    
    public static GraphDB getInstance() {
        if (self==null)
            self = new GraphDB();
        return self;
    }
    
    public  boolean update(Object n) {
        return graph.update(n);
    }
    
    public boolean remove(GraphNode<?> n) {
        return graph.remove(n.getHandle());
    }
    
    public <K> GraphNode<K> addNode(GraphNode<K> n) {
        if (n.getHandle()==null) { //if the element has no handle, it hasn't been stored in the graph
            try {
                n.setHandle(graph.add(n));
                return n;
            } catch(Throwable t) {
                System.out.println(n.toString()+"");
                t.printStackTrace();
                return null;
            } 
        } else
            return n;
    }
    
    public List<ICD9CM> getICD9CMs() {
        return hg.findAll(graph, hg.type(ICD9CM.class));
    }
    
    public void updateICD9CMWithDetailments(ICD9CMCode c, String detailment) {
        ICD9CM node = this.hasICD9CM(c);
        node.addDetailments(detailment);
        node.update();
    }
    
    public void updateICD9CMWithExpandedDetailments(ICD9CMCode c, String expanded_detailment) {
        ICD9CM node = this.hasICD9CM(c);
        node.addExpandedDetailments(expanded_detailment);
        node.update();
    }
    
    //Map<String,HGHandle> wikipedia_cache = new TreeMap<>();
    //Map<String,HGHandle> concept_cache = new TreeMap<>();
    
    public boolean hasEdge(GraphNode<?> src, GraphNode<?> dst) {
        if (src==null||dst==null)
            return false;
        return hg.findAll(graph, hg.link(src.getHandle(),dst.getHandle())).isEmpty();
    }
    
    public List<BinEdge>  getEdge(GraphNode<?> src, GraphNode<?> dst) {
        if (src==null||dst==null)
            return null;
        return hg.<HGHandle>findAll(graph, hg.link(src.getHandle(),dst.getHandle())).stream().map((x) -> { return (BinEdge)get(x); }).collect(Collectors.toList());
    }
    
    public List<BinEdge>  getEdge(BinEdge e) {
        if (e==null)
            return null;
        return hg.<HGHandle>findAll(graph, hg.link(e.getTargetAt(0),e.getTargetAt(1))).stream().map((x) -> { return (BinEdge)get(x); }).collect(Collectors.toList());
    }
    
    public Set<BinEdge> getAdjacent(GraphNode<?> src) {
        HGHandle source = src.getHandle();

        HGDepthFirstTraversal traversal =  new HGDepthFirstTraversal(source, new SimpleALGenerator(graph));
        Set<BinEdge> set = new HashSet<>();
        
        while (traversal.hasNext()) {
            Pair<HGHandle, HGHandle> current = traversal.next();
            set.add((BinEdge)get(current.getFirst()));
        }
        return set;
    }
    
    ////////
    
    public ICD9CM hasICD9CM(ICD9CMCode c) {
        return (ICD9CM)get(hg.findOne(graph, hg.and(hg.type(ICD9CM.class),hg.eq("code", c))));
    }
    
    public ICD9CM hasICD9CM(String c) {
        return (ICD9CM)hg.findOne(graph, hg.and(hg.type(ICD9CM.class),hg.eq("code", new ICD9CMCode(c))));
    }
    
    public void addICD9CMFatherChildRelation(ICD9CM son, ICD9CMCode c) {
        addEdge(new BinEdge(son,hasICD9CM(c),1.0,"hasParent"));
        addEdge(new BinEdge(hasICD9CM(c),son,1.0,"hasChild"));
    }
    
    public void addICD9CMCodeTermRelation(ICD9CM element, Term t) {
        if (!hasEdge(element,t)) {
            addEdge(new BinEdge(element,t,1.0,"hasTerm"));
            addEdge(new BinEdge(t,element,1.0,"hasCode"));
        }
    }
    
    public Term hasTerm(String t,String exp) {
        HGHandle h = hg.findOne(graph,hg.and(hg.type(Term.class),hg.eq("term",t)));
        Term toret;
        if (h!=null)
            toret = (Term)get(h);
        else
            toret = null;
        if (toret==null) {
            toret = new Term();
            toret.setTerm(t);
            toret.setExpandedTerm(exp);
            toret = (Term)addNode(toret);
        }
        return toret;
    }
    
    /////
    
    public boolean hasEdge(BinEdge e) {
        if (e==null)
            return false;
        
        return hg.findAll(graph, hg.link(e.getTargetAt(0),e.getTargetAt(1))).isEmpty();
    }
    
    public Object get(HGHandle h) {
        if (h!=null)
            return graph.get(h);
        else
            return null;
    }
    
    public AtomTypeCondition getType(GraphNode<?> gn) {
        return hg.type(gn.getClass());
    }
    
    public void close() {
        graph.close();
        HGEnvironment.closeAll();
    }
    
    public BinEdge addEdge (BinEdge e) {
        if (e==null)
            return null;
        List<BinEdge> l = getEdge(e);
        if (l.isEmpty()) {
            graph.add(e);
            return e;
        } else
            return l.get(0);
    }
    
    public <K,T> BinEdge addEdge(GraphNode<K> src, GraphNode<T> dest, double score, String relation) {
        return addEdge(new BinEdge(src,dest,score,relation));
    }
    
    public final static String WIKILINK = "WikiLink";
    
    
    /*
    public Edge addWikiLinkEdge(GraphWikiPage src, GraphWikiPage dst) {
        Edge toret = new Edge(src,dst,1,"WikiLink");
        List<Edge> l = getEdge(src,dst);
        if (l.isEmpty()) {
            addEdge(toret);
            return toret;
        } else {
            return l.get(0);
        }
    }
    
    public Edge addWikiToConcept(GraphWikiPage src, String concept) {
        GraphString description = getDescription(concept);
        Edge toret = new Edge(src,description,1,"WikiConcept");
        List<Edge> l = getEdge(src,description);
        if (l.isEmpty()) {
            addEdge(toret);
            return toret;
        } else {
            return l.get(0);
        }
    }
    
    public GraphString getDescription(String text) {
        if (this.concept_cache.containsKey(text))
            return (GraphString)get(this.concept_cache.get(text));
        else {
            GraphString gs = new GraphString();
            gs.setContent(text);
            gs = (GraphString)addNode(gs);
            this.concept_cache.put(text, gs.getHandle());
            return gs;
        }
    }*/
    
    /*public GraphWikiPage getWikiPageNode(String full_title) {
        if (wikipedia_cache.containsKey(full_title)) {
            return (GraphWikiPage)get(wikipedia_cache.get(full_title));
        } else {
            if (!ws.containsPage(full_title)) {
                return null;
            } else {
                GraphWikiPage gwp = (GraphWikiPage)addNode(new GraphWikiPage(ws,full_title));
                wikipedia_cache.put(full_title, gwp.getHandle());
                for (String x : gwp.getWikiLinks()) {
                    if (x==null)
                        continue;
                    GraphWikiPage wikilink = getWikiPageNode(x);
                    if (wikilink!=null)
                        addWikiLinkEdge(gwp,wikilink);
                    else 
                        addWikiToConcept(gwp,x);
                }
                return gwp;
            }
        }
        
    }*/
    
    public void print() {
        hg.getAll(graph, hg.type(GraphWikiPage.class)).stream().forEach((x)->{
            GraphWikiPage p = (GraphWikiPage)x;
            System.out.println(p.getWikiTitle());
        });
    }
    

    
}
